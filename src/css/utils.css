@import url(./utilities/layout-model.css);
@import url(./utilities/scroll-control.css);

/* https://drafts.fxtf.org/
   https://drafts.fxtf.org/compositing-2/ */
.bg-blur-10 {
  backdrop-filter: var(--blur-os);
}

/* https://developer.chrome.com/blog/css-wrapped-2023#trig */

/* https://drafts.csswg.org/css-cascade/#all-shorthand
   initial | inherit | unset | revert | revert-layer */
.all-initial { all: initial; }
.all-unset   { all: unset; }
.all-revert  { all: revert-layer; }

/* Stack level
   https://drafts.csswg.org/css2/#stacking-context */
.zi    { z-index: var(--zi, 1) }
.zi-10 { z-index: var(--zi, 10) }
.zi-20 { z-index: var(--zi, 20) }
/* etc. */

/* https://web.dev/content-visibility/ */
.content-vis {
  content-visibility: auto;
  /* when E is subject to size containment
     https://wicg.github.io/display-locking/sample-code/contain-intrinsic-size-examples.html */
  contain-intrinsic-size: auto var(--size-containment, 1000px);
}

:where(.is-hidden, .sr-only, :is([data-hidden])) {
  position: absolute;
  width: 1px;
  height: 1px; /* auto */
  padding: 0;
  margin: 0;
  overflow: hidden;
  clip: rect(0 0 0 0);
  white-space: nowrap;
  border: 0;
  clip-path: inset(100%);
}

.fixpos { position: fixed }
.abspos { position: absolute }
.relpos { position: relative }

.overlay {
  position: absolute;
  inset: 0;
}

/* top-left */
.inset-start {
  inset-block-start: 0;
  inset-inline-start: 0;
}

/* bottom-right */
.inset-end {
  inset-block-end: 0;
  inset-inline-end: 0;
}

.sticky {
  position: sticky;
  top: var(--offset, 0);
  inset-block-start: var(--offset, 0);
  z-index: 1;
  align-self: start;
}

.abs-centered {
  position: absolute;
  top: 50%;
  inset-block-start: 50%;
  left: 50%;
  inset-inline-start: 50%;
  transform: translate(-50%, -50%);
}

/* Inline and block size overrides */
.inline-fit   { max-inline-size: 100% !important; }
.inline-full  { inline-size: 100% !important; }
.block-fit    { max-block-size: 100% !important; }
.block-full   { block-size: 100% !important; }
.inline-auto  { inline-size: auto !important; }
.block-auto   { block-size: auto !important; }

.m-auto  { margin: auto; }
.mx-auto { margin-inline: auto; }
.my-auto { margin-block: auto; }

/* TODO: padding class names -> (p | px-* | py-* | pt-[10] | etc. ) */

.flow > * + * {
  margin-block-start: var(--flow-space, var(--spacer-2x));
}

/* rounded-pill */
[class*=cta] { border-radius: calc(var(--big-int) * 1px) !important; }

/* :where(.is-anchor-link) {…} */

.has-outline {
  outline: var(--accent) hidden 4px;
  outline-offset: 2px;
}

/* https://www.w3.org/TR/css-values-4/#example-baa620d3 */
.aspect-ratio-box {
  --ar: calc(16 / 9);
  --w: calc(100% / 3);
  --h: calc(var(--w) / var(--ar));
  width: var(--w);
  height: var(--h);
}

.sqr,
.square {
  aspect-ratio: var(--ratio-square);
}

.space-unset {
  padding-inline: unset;
  padding-block: unset;
}

.force-tap-size {
  min-inline-size: var(--min-touch-target-size);
  min-block-size: var(--min-touch-target-size);
}

.side-fade {
  /* Horizontal scroller edge fade mask */
  --lin-grad-fading: linear-gradient(
    90deg,
    var(--trn),
    var(--background) var(--spacer-2x) calc(100% - var(--spacer-2x)),
    var(--trn));

  mask: var(--mask, var(--lin-grad-fading));
}

/* CSS Scroll Masking
   → https://codepen.io/jh3y/pen/zYQxKjx */

.masked {
  /* mask tldr;
     as the visible percentage increases,
     the masked percentage decreased
     visible starts at 1%
     masked starts at 7%
     for a recreding 7 hard lines mask effect
     (a loop and some calc could generate this)
     ref → https://codepen.io/argyleink/pen/XWPjzgR
   */
  mask: linear-gradient(
    to top,
    #000 1%,     /* 1% visible */
    0%,            /* hard line */
    #0000 8%,    /* 7% masked */
    0%,
    #000 10%,    /* 2% visible */
    0%,
    #0000 16%,   /* 6% masked */
    0%,
    #000 19%,    /* 3% visible */
    0%,
    #0000 24%,   /* 5% masked */
    0%,
    #000 28%,    /* 4% visible */
    0%,
    #0000 32%,   /* 4% masked */
    0%,
    #000 37%,    /* 5% visible */
    0%,
    #0000 40%,   /* 3% masked */
    0%,
    #000 46%,    /* 6% visible */
    0%,
    #0000 48%,   /* 2% masked */
    0%,
    #000 55%,    /* 7% visible */
    0%,
    #0000 56%,   /* 1% invisible */
    0%,
    #000 57%     /* visible til end */
  );
}

.bg-canvas {
  background: canvas;
}

.bg-image { /* TODO: Define utility class */
  background-image: var(--bg-final-image,
    var(--bg-image, /* …, var(--bg-imageN) */)
  );
}

.bg-noise {
  --noise: url(../images/noise.png); /* TODO: Add noise variations */

  background: repeat center/150px var(--noise);
  background-attachment: fixed;
}

.bg-gradient {
  --gradient:
    radial-gradient(
      circle,
      var(--trn) 0%,
      33.333%,
      var(--accent-shade) 100%
    );

  background-image: var(--gradient);
  background-size: 100% 100vh;
  background-repeat: no-repeat;
  background-attachment: fixed;

}

/* Isolation creates a new stacking context for mix-blend-mode.
   See: https://developer.mozilla.org/en-US/docs/Web/CSS/isolation */
.isolate {
  isolation: isolate;
  position: absolute;
  inset-block-start: 0;
  inline-size: 100%;
  block-size: 100%;
}

/* CSS Noise Gradient (shadow)
   → https://codepen.io/cjimmy/pen/XWRQPep */
@layer {
  :has(>.sketch) {
    background: var(--riso-black);
  }
  .sketch {
    --_noise: url(https://grainy-gradients.vercel.app/noise.svg);
    inline-size: 250px;
  }
  .ball {
    z-index: 1;
    inline-size: 250px;
    aspect-ratio: var(--ratio-1);
    border-radius: calc(var(--big-int)*1px);
    overflow: hidden;

    & [class*=light] {
      inline-size: 100%;
      block-size: 100%;
      background: radial-gradient(circle at 67% 30%, lightsalmon, crimson);
      mix-blend-mode: multiply;
    }
    & [class*=shadow] {
      block-size: 100%;
      background-image:
        radial-gradient(circle at 65% 35%, var(--trn), mediumblue),
        var(--_noise);
      filter: contrast(120%) brightness(900%);
    }
  }
  .ground {
    inline-size: 150%;
    block-size: 140px;
    inset-block-end: -10px;
    inset-inline-start: -65%;
    transform: rotateZ(7deg);
    mix-blend-mode: multiply;

    & [class*=shadow] {
      inline-size: 95%;
      block-size: 140px;
      border-radius: 50%;
      background:
        radial-gradient(ellipse at 70%, navy, var(--trn)),
        var(--_noise);
      filter: contrast(150%) brightness(700%);
    }
  }
}

/* TODO */
/* https://grainy-gradients.vercel.app/ */
.grainy-gradient {
  inline-size: 100%;
  block-size: 100%;
  background: radial-gradient(
    ellipse at 70%,
    var(--accent),
    var(--trn)
  ), url(https://grainy-gradients.vercel.app/noise.svg); /* 500x500 px */
  filter: contrast(150%) brightness(700%);
}
/* & :has(> .grainy-gradient) {} */

.border-gradient {
  --num: 2;
  --hint: calc(100% - 100% / (var(--num) + 1) * var(--num));
  border-color: var(--border-color, var(--background));
  border-style: solid;
  border-width: var(--_size, .125cqi);

  border-image-source: var(--border-imgsrc,
    linear-gradient(
      45deg,
      var(--c1, transparent),
      var(--hint, 33.333%),
      var(--c2, currentcolor)
    )
  );
  border-image-slice: 1;
  border-image-width: 1;

  &:where(.--voygb) {
    border-image-source: var(--lin-gradient-voygb);
  }
}

.text-gradient {
  background: linear-gradient(
    to right,
    hsl(98 100% 62%),
    hsl(204 100% 59%)
  );
  -webkit-background-clip: text;
  -webkit-text-fill-color: var(--trn, transparent);
}

.text-center { text-align: center; }
.text-left   { text-align: left; }

.caps,
.uppercase,
.text-uppercase { text-transform: uppercase; }
.lowercase,
.text-lowercase { text-transform: lowercase; }

/* https://www.w3.org/TR/css-inline-3/#line-height */
.text-caps-trim {
  --case: 1;

  text-transform: uppercase;
  letter-spacing: var(--letter-spacing-2);
  text-edge: cap alphabetic;
  leading-trim: both;
}

.font-caps { font-variant-caps: all-petite-caps; }
.font-smcp { font-variant-caps: small-caps; }

.ellipse {
  text-wrap: balance;
  -webkit-line-clamp: 3;
  overflow: hidden;
  display: -webkit-box;
  -webkit-box-orient: vertical;
}

.has-dropcap {
  /* @include config.drop-cap(6rem, 0.65); */
}

.sideways {
  @media (min-width: 48em) {
    /* … */
  }
}

:where([class~=tag]) {
  line-height: 1.5;
  padding-inline: calc(.5lh / 2);
  border-radius: calc(1cqi / 4);
  background: var(--neon-lime);
}

:where([class*=keyline]) {
  display: grid;
  grid-template-columns: 1fr auto 1fr;
  gap: var(--spacer-2x);
  inline-size: 100%;

  &::before,
  &::after {
    align-self: center;
    content: '';
    border-top: 0.5px solid var(--border-color);
  }
}

/* ----------------------------------- NEW ---------------------------------- */

/* https://developer.chrome.com/blog/entry-exit-animations */
/* :is([class*=loaded], etc…), */
.init-reveal * {
  transition: opacity .5s ease-in;
  @starting-style { opacity: 0 } /* to 1 when it is initially rendered */
}

/* https://12daysofweb.dev/2022/new-viewport-units/ */
.cover-dynamic-viewport {
  width: 100vw;
  width: 100dvi;
  height: 100vh;
  height: 100dvb;
}

/* https://web.dev/articles/min-max-clamp */
.clamp-inline-size {
  --_min: 20ch;
  --_max: 40ch;
  --_sp: 2ch;
  --_th: 50%;

  inline-size: calc(var(--_th) - var(--_sp));
  min-inline-size: var(--_min);
  max-inline-size: var(--_max);
}

.relative-shadow {
  --base: hsl(var(--tint, 214) 80% 27% / calc(var(--alpha, 4) * 1%));
  /**
   * Use relative syntax to get to: hsl(221 25% 22% / 40%)
   */
  --shade: hsl(from var(--base) calc(h + 8) 25 calc(l - 5));
  --perfect-shadow:
    0 0 0 1px var(--base),
    0 1px 1px -0.5px var(--shade),
    0 3px 3px -1.5px var(--shade),
    0 6px 6px -3px var(--shade),
    0 12px 12px -6px var(--base),
    0 24px 24px -12px var(--base);
}

@layer skeleton {
  :where(:root) {
    &:has(input[name="debug-mode"]:checked) {
      color-scheme: dark only;
    }
  }

  /* https://en.wikipedia.org/wiki/Graph_paper
     https://css-pattern.com/graph-paper/
   */
  .graph-paper {
    --sqr-10: calc(1cm / 10); /* millimeter */
    --sqr-05: calc(1in / 5); /* engineering */
    --sqr-04: calc(1in / 4); /* quad */


    /* https://en.wikipedia.org/wiki/Prussian_blue */
    --blueprint-pb: hsl(205 100% 16%); /* #003153 */

    color: color-mix(in lch, canvasText, transparent 15%);

    :where([class*=debug]) & {
      --sqr: var(--sqr-05);
      background: var(--blueprint-pb);
    }

    &::before {
      --_size: var(--sqr, 8px);
      --_line: color-mix(in lch, canvasText, transparent 85%);

      position: absolute;
      inset-block-start: 0;
      content: '';
      z-index: -1;
      block-size: 100svh;
      inline-size: 100vw;
      background:
        linear-gradient(
          90deg,
          var(--_line) 1px,
          transparent 1px var(--_size)
        ) 50% 50% / var(--_size) var(--_size),
        linear-gradient(
          var(--_line) 1px,
          transparent 1px var(--_size)
        ) 50% 50% / var(--_size) var(--_size);
      mask: linear-gradient(-25deg, transparent 30%, white);
      transform-style: flat;
      pointer-events: none;
    }
  }

  [class~=placeholder] {
    /* --i: 1; */
    --_ratio: 9/8; /* 4/3; 3/2; 16/9; etc. */
    --_hue: 90deg;
    --_sat: 100%;
    --_lum: 50%;
    --_hsl:
      calc(var(--_hue) * (var(--i) * var(--_ratio)))
      calc(var(--_sat) * (var(--i) * .618033))
      var(--_lum);

    color: hsl(var(--_hsl)); /* SVG */
    position: relative;
    overflow: hidden;

    display: inline-flex;
    max-block-size: 100svb;

    /* JS-free version of https://github.com/cloudfour/simple-svg-placeholder */
    &::after {
      z-index: 1;
      content: attr(data-dummy);
      text-align: center;
      position: absolute;
      inset-inline-start: 50%;
      inset-block-start: 50%;
      transform: translate(-50%,-50%);
      /* transform: translate(-50%,-50%) rotatez(-.125turn); */
      font: var(--font-weight-7) clamp(1.5rem, 2vw + 1rem, 2.25rem) var(--ui-mono);
      color: #fff5;
      color: color-mix(
        in var(--colorspace, oklab),
        hsl(var(--_hsl)),
        hsl(var(--fg-hsl))
        var(--c2-amount, 50%)
      );
      background: linear-gradient(
        to right
        in var(--colorspace, oklab),
        hsl(var(--_hsl)),
        hsl(var(--bg-hsl))
      );
      inline-size: 100%;
      /* block-size: 100%;
      display: grid;
      place-content: center; */
    }
    /*
    &:nth-of-type(1) { color: #1115; }
    &:nth-of-type(2) { color: #2225; }
    &:nth-of-type(3) { color: #3335; } */

    & > svg {
      inline-size: 100%;
      margin-block: auto;
      & + & { margin-inline-start: 2dvi;}
    }
    &:nth-of-type(1) > svg {
      aspect-ratio: var(--ratio-3);
    }
    &:nth-of-type(2) > svg {
      aspect-ratio: var(--ratio-square);
      /* max-inline-size: calc(100% / 2); */
    }
    &:nth-of-type(3) > svg {
      aspect-ratio: 9 / 16;
      max-inline-size: calc(100% / 3);
    }
  }
}
