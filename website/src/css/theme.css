/* Contains color swatches and theme configuration */
@import url("props/colors.css") layer(theme);

/* Contains typography rules; scale and typeset */
@import url("props/fonts.css") layer(theme);

/* Contains layout, utilities and helper tokens */
@import url("props/defaults.css") layer(theme);

/* TODO: https://drafts.csswg.org/css-regions/ */

/* TODO Contains custom MQs */
/* @import url(props/media.css) layer(theme); */

@layer theme { /* config; setup theme defaults */
  @layer color, props, support;

  /* https://drafts.csswg.org/selectors-3/#x */
  @layer support.any { /* universal, pseudos */
    * {
      box-sizing: inherit;
      background-repeat: no-repeat;
      background-origin: border-box;
    }

    *::before,
    *::after { box-sizing: inherit; }

    *::selection {
      color: var(--selection-foreground, inherit);
      text-shadow: none;
      background: var(--selection-background, inherit);

      /* autoprefixer: ignore next */
      -webkit-tap-highlight-color: var(--trn);
    }

    ::placeholder {
      color: currentcolor;
      opacity: .75;
    }

    /* :where(dialog) */
    ::backdrop {
      backdrop-filter: blur(25px);
    }

    /* https://drafts.csswg.org/mediaqueries-5/#mf-interaction */
    @media (hover: hover) {
      * {
        outline-color: var(--trn);
        outline-offset: 3px;
      }

      *:focus-visible {
        outline: 1px dotted var(--accent);
      }
    }
  }

  /* Sections & Grouping */
  @layer support.page { /* layout, regions */
    html {
      block-size: 100%;
    }

    body {
      min-inline-size: 100%;
      min-inline-size: -webkit-fill-available;
      min-block-size: 100%;
      min-block-size: -webkit-fill-available;

      /* scroll-padding-top: var(--header-height, 60px); */
      overflow-x: hidden;
      color: var(--foreground);
      background: var(--background);
      transition:
        color var(--duration) var(--easing),
        background-color var(--duration) var(--easing);
    }

    :where(html:has(dialog[open])) {
      overflow: hidden;
    }

    /* Sectioning content */
    /* https://matcha.mizu.sh/#sectioning */
    :where(main, section) { position: relative; }

    :where(main) {
      min-inline-size: 100%;
      block-size: 100%;
      contain: size layout;
    }
  }

  /* https://api.iconify.design/line-md:sun-rising-filled-loop.svg
     https://api.iconify.design/line-md:moon-rising-alt-loop.svg */
  theme-switch {
    --theme-switch-border-color: var(--trn);
    --theme-switch-icon-size: 1.75em;
    --theme-switch-icon-filter: drop-shadow(0 3px 6px var(--accent-a50));
    --theme-switch-icon-fill: var(--accent);
    --theme-switch-icon-fill-hover: var(--accent);

    z-index: 1020;
    display: flex;
    align-items: center;
    justify-content: center;

    inline-size: 44px;
    block-size: 44px;

    color: var(--foreground);
    background-color: var(--background);
    border-radius: 50%;
    box-shadow: 0 8px 24px var(--shadow);

    &::part(form),
    &::part(fieldset) {
      inline-size: 100%;
      block-size: 100%;
    }

    /* centering */
    &::part(fieldset), [part=fieldset] {
      display: flex;
    }

    &::part(toggleLabel), [part=toggleLabel] {
      padding: 1ch; /* ~ 8.5 px */
      aspect-ratio: 1;
    }
  }

  /* work w/o shadow root */
  theme-switch > noscript { /* FIXME */
    & :where(
      [part=form],
      [part=fieldset]
    ) {
      inline-size: 100%;
      block-size: 100%;
    }
  }

  svg:not([class]) { fill: currentcolor }

  svg:is([width=0],[data-hidden]) {
    &:has(> defs) {
      & g { color: currentcolor }

      /* Defines the color of the light source for filter primitives
       * https://drafts.fxtf.org/filter-effects/#LightingColorProperty
       * https://drafts.fxtf.org/filter-effects/#feDiffuseLightingElement
       * https://drafts.fxtf.org/filter-effects/#feSpecularLightingElement
       */
      & filter > :is(feDiffuseLighting, feSpecularLighting) {
        lighting-color: var(--lighting-color, white);
      }
    }

    [data-theme-style=light] & {
      --lighting-color: hsl(var(--aurora-pink));
    }

    [data-theme-style=dark] & {
      --lighting-color: hsl(var(--saturn-yellow));
    }
  }

  /* code, kbd, pre, samp {
    font-family: var(--ui-mono);
    font-feature-settings: normal;
    font-variation-settings: normal;
    font-size: 1em;
  } */

  /* https://drafts.csswg.org/css-ui/#insertion-caret */
  /* @supports (caret-animation: manual) {â€¦} */
  @supports (caret-shape: block) {
    [contenteditable] { caret-shape: block }
  }

  [id] {
    scroll-margin-top: var(--scroll-margin, 0);
  }
}

@layer theme.support.any {
  @supports (scrollbar-width: thin) {
    /*
      https://drafts.csswg.org/css-scrollbars/
      https://drafts.csswg.org/css-overflow/#scrollbar-layout
    */
    * {
      scrollbar-width: none;
      scrollbar-color: inherit;

      /* TODO Default scrollbars styling */
      /* scrollbar-color: var(--ui-scrollbar-color,
        var(--thumb, var(--accent))
        var(--track, var(--acent-shade))
      ); */

      /* https://defensivecss.dev/tip/scrollbar-gutter/ */
    }
  }
}
